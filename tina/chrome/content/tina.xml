<?xml version="1.0"?>
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is McCoy.
#
# The Initial Developer of the Original Code is
# the Mozilla Foundation <http://www.mozilla.org/>.
# Portions created by the Initial Developer are Copyright (C) 2007
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Dave Townsend <dtownsend@oxymoronical.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

<!DOCTYPE bindings SYSTEM "chrome://tina/locale/tina.dtd">

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="radioselector" extends="chrome://global/content/bindings/radio.xml#radio">
    <content align="center">
      <xul:image class="selectorIcon" xbl:inherits="src=image"/>
      <xul:label class="selectorLabel" xbl:inherits="value=label"/>
    </content>
    <implementation implements="nsIAccessibleProvider">
      <property name="accessibleType" readonly="true"
                onget="return Components.interfaces.nsIAccessibleProvider.XULListItem"/>
    </implementation>
  </binding>

  <binding id="filechooser" extends="chrome://global/content/bindings/general.xml#basecontrol">
    <content orient="horizontal" align="center">
      <xul:stringbundle src="chrome://tina/locale/tina.properties"
                        anonid="stringbundle"/>
      <xul:filefield anonid="filefield" flex="1" xbl:inherits="disabled,accesskey,tabindex"/>
      <xul:button label="&filechooser.browse;" xbl:inherits="disabled"
                  oncommand="this.parentNode.browseFiles()"/>
    </content>

    <implementation>
      <field name="_strings">document.getAnonymousElementByAttribute(this, "anonid", "stringbundle")</field>
      <field name="_fileField">document.getAnonymousElementByAttribute(this, "anonid", "filefield")</field>

      <property name="file" onget="return this._fileField.file"
                            onset="this._fileField.file = val; return val"/>

      <property name="label" onget="return this.getAttribute('label')"
                             onset="this.setAttribute('label', val); return val"/>

      <property name="types">
        <getter>
          if (!this.hasAttribute("types"))
            return [];
          return this.getAttribute("types").split(",");
        </getter>
        <setter>
          this.setAttribute("types").join(",");
        </setter>
      </property>

      <method name="browseFiles">
        <body>
        <![CDATA[
          const nsIFilePicker = Components.interfaces.nsIFilePicker;

          var mode = nsIFilePicker.modeOpen;
          if (this.hasAttribute("mode")) {
            switch (this.getAttribute("mode").toLowerCase()) {
              case "save":
                mode = nsIFilePicker.modeSave;
                break;
              case "folder":
                mode = nsIFilePicker.modeGetFolder;
                break;
              case "multiple":
                mode = nsIFilePicker.modeOpenMultiple;
                break;
            }
          }
          var fp = Components.classes["@mozilla.org/filepicker;1"]
                             .createInstance(nsIFilePicker);
          fp.init(window, this.label, mode);

          var types = this.types;
          for (var i = 0; i < types.length; i++)
            fp.appendFilter(this._strings.getString("filepicker.type." + types[i]), "*." + types[i]);

          fp.appendFilters(nsIFilePicker.filterAll);
          fp.filterIndex = 0;
          if (this.file) {
            fp.displayDirectory = this.file.parent;
            fp.defaultString = this.file.leafName;
          }
          else {
            fp.defaultString = this.getAttribute("filename");
          }
          if (fp.show() != nsIFilePicker.returnCancel) {
            this._fileField.file = fp.file;
            var event = document.createEvent("Events");
            event.initEvent("change", true, true);
            this.dispatchEvent(event);
          }
        ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="helplink">
    <content>
      <xul:button tooltiptext="&helplink.tooltip;"/>
    </content>
    <handlers>
      <handler event="command">
        var ios = Components.classes["@mozilla.org/network/io-service;1"]
                            .getService(Components.interfaces.nsIIOService);
        var uri = ios.newURI(this.getAttribute("href"), null, null);
        var protocolSvc = Components.classes["@mozilla.org/uriloader/external-protocol-service;1"]
                                    .getService(Components.interfaces.nsIExternalProtocolService);
        protocolSvc.loadUrl(uri);
      </handler>
    </handlers>
  </binding>

</bindings>
