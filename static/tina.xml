<?xml version="1.0"?>
<!--
        This program is free software; you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation; either version 2 of the License, or
        (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program; if not, write to the Free Software
        Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
        MA 02110-1301, USA.
-->
<!DOCTYPE bindings SYSTEM "chrome://tina/locale/tina.dtd">

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="radioselector" extends="chrome://global/content/bindings/radio.xml#radio">
    <content align="center">
      <xul:image class="selectorIcon" xbl:inherits="src=image"/>
      <xul:label class="selectorLabel" xbl:inherits="value=label"/>
    </content>
    <implementation implements="nsIAccessibleProvider">
      <property name="accessibleType" readonly="true"
                onget="return Components.interfaces.nsIAccessibleProvider.XULListItem"/>
    </implementation>
  </binding>

  <binding id="filechooser" extends="chrome://global/content/bindings/general.xml#basecontrol">
    <content orient="horizontal" align="center">
      <xul:stringbundle src="chrome://tina/locale/tina.properties"
                        anonid="stringbundle"/>
      <xul:filefield anonid="filefield" flex="1" xbl:inherits="disabled,accesskey,tabindex"/>
      <xul:button label="&filechooser.browse;" xbl:inherits="disabled"
                  oncommand="this.parentNode.browseFiles()"/>
    </content>

    <implementation>
      <field name="_strings">document.getAnonymousElementByAttribute(this, "anonid", "stringbundle")</field>
      <field name="_fileField">document.getAnonymousElementByAttribute(this, "anonid", "filefield")</field>

      <property name="file" onget="return this._fileField.file"
                            onset="this._fileField.file = val; return val"/>

      <property name="label" onget="return this.getAttribute('label')"
                             onset="this.setAttribute('label', val); return val"/>

      <property name="types">
        <getter>
          if (!this.hasAttribute("types"))
            return [];
          return this.getAttribute("types").split(",");
        </getter>
        <setter>
          this.setAttribute("types").join(",");
        </setter>
      </property>

      <method name="browseFiles">
        <body>
        <![CDATA[
          const nsIFilePicker = Components.interfaces.nsIFilePicker;

          var mode = nsIFilePicker.modeOpen;
          if (this.hasAttribute("mode")) {
            switch (this.getAttribute("mode").toLowerCase()) {
              case "save":
                mode = nsIFilePicker.modeSave;
                break;
              case "folder":
                mode = nsIFilePicker.modeGetFolder;
                break;
              case "multiple":
                mode = nsIFilePicker.modeOpenMultiple;
                break;
            }
          }
          var fp = Components.classes["@mozilla.org/filepicker;1"]
                             .createInstance(nsIFilePicker);
          fp.init(window, this.label, mode);

          var types = this.types;
          for (var i = 0; i < types.length; i++)
            fp.appendFilter(this._strings.getString("filepicker.type." + types[i]), "*." + types[i]);

          fp.appendFilters(nsIFilePicker.filterAll);
          fp.filterIndex = 0;
          if (this.file) {
            fp.displayDirectory = this.file.parent;
            fp.defaultString = this.file.leafName;
          }
          else {
            fp.defaultString = this.getAttribute("filename");
          }
          if (fp.show() != nsIFilePicker.returnCancel) {
            this._fileField.file = fp.file;
            var event = document.createEvent("Events");
            event.initEvent("change", true, true);
            this.dispatchEvent(event);
          }
        ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="helplink">
    <content>
      <xul:button tooltiptext="&helplink.tooltip;"/>
    </content>
    <handlers>
      <handler event="command">
        var ios = Components.classes["@mozilla.org/network/io-service;1"]
                            .getService(Components.interfaces.nsIIOService);
        var uri = ios.newURI(this.getAttribute("href"), null, null);
        var protocolSvc = Components.classes["@mozilla.org/uriloader/external-protocol-service;1"]
                                    .getService(Components.interfaces.nsIExternalProtocolService);
        protocolSvc.loadUrl(uri);
      </handler>
    </handlers>
  </binding>

</bindings>
